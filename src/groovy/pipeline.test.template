// The Informatics Matters Pipeline Test Specification Template.
//
// Copy this file (removing the `.template` extension) and place it next
// to your pipeline script using the same base-name as your script.
// For example, if you have a `experiment_1a.py` pipeline your test file would
// be called `experiment_1a.test`.
//
// This test specification contains lists of tests that define
// excitation parameters for your pipeline and an optional set of
// expectations of what should be seen logged by it.

[

    // The PipelineTester test script version.
    // Must be supported by the PipelineTester utility.
    // Check with your administrator and set it to the latest value that is
    // supported.

    version = 1,

    // An optional `setup_collection` section.
    //
    // This defines settings for the entire test suite.
    // At the moment the following settings are supported:
    //
    // timeout: The time allowed for each pipeline test to complete.
    //          Use this to override the default of 30 seconds.
    //
    // There can only be one setup_collection section and it must be
    // the first section.

    setup_collection = [
        timeout: 10
    ],

    // Individual tests.
    //
    // Test sections have a name that begins with the word `test`. Add as many
    // as you need in the file in order to fully test the behaviour of your
    // pipeline.
    //
    // Tests consist of blocks of `params` and optional `see` definitions.
    //
    // In the `params` block you must define a parameter value for each option
    // that is defined in your Service Descriptor. The test executor will
    // check that you have done this.
    //
    // The optional `see` block is a list of regular expression strings
    // that are used to inspect the log generated by your pipeline
    // and is used to verify anything significant that is written to the log
    // by your pipeline. For example, if the test is successful when the
    // pipeline logs the text 'Computation = 4.5673' then you would add
    // this to the `see` section (as illustrated below).
    //
    // If a test is not working an you want to keep it and avoid running it
    // then simply prefix the test section name with `ignore_`.

    test_1 = [

        // An optional test-specific 'raw' command.
        //
        // As an alternative to exercising the service-descriptor-supplied
        // command you can specify your own raw command.
        //
        // If you provide a command you **cannot** provide parameters
        // (see the params section below).

        command: ```python my_own_command
                 --my-own-param-1 32
                 --my-own-param-2 18.5```

        // Test parameters.
        //
        // Unless you are testing a raw command (see above) you need to
        // provide the built-in service descriptor command wih parameters
        // and values.
        //
        // A parameter value must be defined for each option that does not
        // have a default.

        params: [ doses: 55,
                  volumes: 0.42,
                  temperature : [minValue: 14.0, maxValue: 22.0] ],

        // Log validation.
        //
        // Optional checks against the pipeline's log.
        // To simplify strign checks against output that contains variable
        // whitespace (like tabs etc.) spaces are automatically interpreted
        // as the regular expression '[ \t]+', absorbing any non-line-breaking
        // gaps. You can also use regular expressions.

        see: [ 'Computation = 4.5673' ],

        // Files created and not created.
        //
        // If your pipeline creates files you can and should declare
        // their names in a `creates` block. The test utility will make
        // sure they exist when your pipeline completes (successfully).
        // Additionally, if you are not expecting certain files for the test
        // you can also name them. Here we expect to see the file 'output.png'
        // but not the file 'output.txt'

        creates: [ 'output.png' ],
        does_not_create: [ 'output.txt' ]

    ],

    test_2 = [

        params: [ doses: '55,65,75'
                  volumes: 0.82,
                  temperature : [minValue: 14.0, maxValue: 22.0] ],

        see: [ 'Computation = 4.5673',
               'Computation = 5.5673',
               'Computation = 6.5673' ]

    ],

]
